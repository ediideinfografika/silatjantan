{#
/**
 * @file
 * Theme override to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - node.getCreatedTime() will return the node creation timestamp.
 *   - node.hasField('field_example') returns TRUE if the node bundle includes
 *     field_example. (This does not indicate the presence of a value in this
 *     field.)
 *   - node.isPublished() will return whether the node is published or not.
 *   Calling other methods, such as node.delete(), will result in an exception.
 *   See \Drupal\node\Entity\Node for a full list of public properties and
 *   methods for the node object.
 * - label: The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: Themed creation date field.
 * - author_name: Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_node()
 *
 * @ingroup uikit_themeable
 */
#}


<style>

    #menu1 {
        background: #fff;
        position: absolute;
        z-index: 99;
        top: 10px;
        left: 10px;
        border-radius: 3px;
        width: auto;
        border: 1px solid rgba(0, 0, 0, 0.4);
        font-family: 'Open Sans', sans-serif;
        
    }

    #menu a {
             text-transform: uppercase;
    font-size: 10px;
    color: #000000;
    display: block;
    margin: 0;
    background: #c6eff3;
        padding: 0;
        padding: 10px;
        text-decoration: none;
        border-bottom: 1px solid rgba(0, 0, 0, 0.25);
        text-align: center;
    }

    #menu a:last-child {
        border: none;
    }

    #menu a:hover {
        background-color: #f8f8f8;
        color: #404040;
    }

    #menu a.active {
        background-color: #3887be;
        color: #ffffff;
    }

    #menu a.active:hover {
        background: #3074a4;
    }
  

        #map {
           position: relative;
        top: 0;
        bottom: 0;
        height:700px;
        width: 100%;
      }

      .mapboxgl-popup {
        max-width: 400px;
        font: 12px/20px "Helvetica Neue", Arial, Helvetica, sans-serif;
      }

      .mapboxgl-popup {
        max-width: 400px;
        font: 12px/20px "Helvetica Neue", Arial, Helvetica, sans-serif;
      }
      .map-overlay {
            z-index: 99;
position: absolute;
    bottom: 40px;
    right: 2px;
    background: #fff;
    margin-right: 20px;
    font-family: Arial, sans-serif;
    overflow: auto;
    border-radius: 3px;
    padding: 13px;
}
#legend {
   padding: 10px;
    box-shadow: 0 1px 2px rgb(0 0 0 / 10%);
    line-height: 19px;
    height: 137px;
    width: 144px;
    font-size: 10px;
}
.legend-key {
display: inline-block;
border-radius: 20%;
width: 10px;
height: 10px;
margin-right: 5px;
}

  #menu {
      position: absolute;
    /* background: #fff; */
    border-radius: 20px;
    top: 10px;
    right: 12px;
    padding: 10px;
    font-family: "Open Sans", sans-serif;
        z-index: 99;
      }


      

#sidebarx {
 position: absolute;
    top: 0px;
    left: -260px;
    width: 260px;
    height: 100%;
    color: #fff;
    z-index: 1;
    background: #151719ad;
    transition: all 300ms linear;
}
#sidebarx.active {
  left:0;
  padding: 47px 0px 47px 13px;
      overflow: scroll;
}
#sidebarx .toggle-btn {
  position:absolute;
  left:220px;
      top: 42px;
}
#sidebarx .toggle-btn span {
  display:block;
  width:30px;
  height:5px;
  background:#151719;
  margin:5px 0px;
  cursor:pointer;
}
#sidebarx div.list div.item {
  padding:15px 10px;
  border-bottom:1px solid #444;
  color:#fcfcfc;
  text-transform:uppercase;
  font-size:12px;
}

#sidebarx div.list div.item a{
  color:#fcfcfc;
  text-decoration: none;
}

#wadahfeat{
  padding:0;
   padding-bottom: 30px;
}
#wadahfeat li a {
    color: #e8f0f7;
}
#wadahfeat li  {
    list-style:none;
   
}

.btcari{
      width: 52px;
    padding-right: 10p;
    margin: 4px 13px;
}

      /* Marker tweaks */
      .mapboxgl-popup {
            left: -10px;
      }

      .mapboxgl-popup-close-button {
            position: absolute;
    right: 19px;
    top: 0;
    border: 0;
    border-radius: 0 3px 0 0;
    cursor: pointer;
    background-color: #f70303 !important;
    color: #fff;
    font-size: 15px;
      }
      .mapboxgl-popup-content {
            font: 400 14px/13px 'Source Sans Pro', 'Helvetica Neue', sans-serif;
    padding: 0;
    width: 350px;
      }
      .mapboxgl-popup-content h3 {
           background: #91c949;
    color: #000;
    margin: 0;
    padding: 5px;
    border-radius: 3px 3px 0 0;
    font-weight: 700;
    margin-top: -15px;
    font-size: 1em;
      }

      .mapboxgl-popup-content h4 {
           margin: 0;
    padding: 5px;
    font-weight: bold;
    font-size: 1.2em;
      }


      }

      .mapboxgl-popup-anchor-top > .mapboxgl-popup-content {
        margin-top: 5px;
      }

      .mapboxgl-popup-anchor-top > .mapboxgl-popup-tip {
        border-bottom-color: #91c949;
      }
      
      
      .marker {
        background-size: cover;
        width: 30px;
        height: 30px;
        border-radius: 50%;
        cursor: pointer;
      }
      .marker.marker_b
      { background-image: url('/sites/default/files/marker_b.svg');}
      .marker.marker_rr
      { background-image: url('/sites/default/files/marker_rr.svg');}
      .marker.marker_rs
      { background-image: url('/sites/default/files/marker_rs.svg');}
      .marker.marker_rb
      { background-image: url('/sites/default/files/marker_rb.svg');}
      .marker.marker_kritis
      { background-image: url('/sites/default/files/marker_kritis.svg');}
      .marker.marker_runtuh
      { background-image: url('/sites/default/files/marker_runtuh.svg');}
      .marker.marker_d
      { background-image: url('/sites/default/files/marker_d.svg');}
      
      
      .mapboxgl-popup {
        min-width: 400px;
      }
      .mapboxgl-popup-content {
        text-align: center;
        font-family: 'Open Sans', sans-serif;
      }
    
    


</style>
{% if title %}
  <h3>{{ title }}</h3>
{% endif %}
 <script src="https://api.mapbox.com/mapbox-gl-js/v2.0.1/mapbox-gl.js"></script>
    <link
      href="https://api.mapbox.com/mapbox-gl-js/v2.0.1/mapbox-gl.css"
      rel="stylesheet"
    />
    <script src="https://unpkg.com/papaparse@latest/papaparse.min.js"></script>



  
<div id="map">
 <div id="menu1">
   <input id="satelit" type="radio" name="rtoggle" value="satellite" checked="checked" />
      <label for="satellite">satellite</label>
      <input id="streets-v11" type="radio" name="rtoggle" value="streets"/>
      <label for="streets">streets</label>
      <input id="light-v10" type="radio" name="rtoggle" value="light" />
      <label for="light">light</label>
      <input id="dark-v10" type="radio" name="rtoggle" value="dark" />
      <label for="dark">dark</label>
      <input id="outdoors-v11" type="radio" name="rtoggle" value="outdoors" />
      <label for="outdoors">outdoors</label>
      <button class="btcari" onclick="toggleSidebar(this)"> Cari</button>  
    </div>

  <div class="map-overlay" id="legend"></div>



<div id="sidebarx">

 <form>
  <input type="text" id="filter">
  <ul id="wadahfeat">
  
  </ul>
</form>
</div>



</div>










<script src="https://cdn.jsdelivr.net/npm/fuse.js@6.6.2"></script>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/jquery-filterlist@1.0.3/lib/jquery.filterList.min.js"></script>
  <script>
function toggleSidebar(ref){
  document.getElementById("sidebarx").classList.toggle('active');
}

document.getElementById('filter').addEventListener('click', () => {
map.fitBounds([
[111.45,-7.8], // southwestern corner of the bounds
[111.83,-7.43] // northeastern corner of the bounds
]);
});



      //YOUR TURN: Replace with your Mapbox Token
      const apiKey = "AAPK79d62b890b694fe6b15a3fa76116acf9ztzOzKN55-fQXqFyPp7KqRlhqm68rJW9Tj4BgViZoVt5GZrnGD7hbcXij58yGz-o";
      const basemapEnum = "ArcGIS:Imagery";
      
      
      mapboxgl.accessToken = 'pk.eyJ1Ijoicm9iYWl0IiwiYSI6ImNqbXEzczh2bjA2bjgzd213azh2ZXE0bTYifQ.H4ObVqAY4KTQk17fpTV1kw';
      var map = new mapboxgl.Map({
        container: "map",
       style: `https://basemaps-api.arcgis.com/arcgis/rest/services/styles/${basemapEnum}?type=style&token=${apiKey}`,
        zoom: 12, // starting zoom
        center: [111.653,-7.500]
      });
    
      


 const geojson = {{ geojsonx|raw }};
 

      // add markers to map
      geojson.features.forEach(function (marker) {
          console.log(marker.properties);
        // create a HTML element for each feature
        var el = document.createElement('div');
        if(marker.properties.k_kondisi==1){
           el.className = 'marker marker_b';  
           var bege='bg-success';
        }
        else if(marker.properties.k_kondisi==2){
           el.className = 'marker marker_rr';
           var bege='bg-secondary';
        }
        else if(marker.properties.k_kondisi==3){
           el.className = 'marker marker_rs'; 
           var bege='bg-primary';
        }
        else if(marker.properties.k_kondisi==4){
           el.className = 'marker marker_rb';  
           var bege='bg-warning';
        }
        else if(marker.properties.k_kondisi==5){
           el.className = 'marker marker_kritis';  
           var bege='bg-danger';
        }
        else if(marker.properties.k_kondisi==6){
           el.className = 'marker marker_runtuh';  
            var bege='bg-danger';
        }
        else{
           el.className = 'marker marker_d';  
           var bege='bg-secondary';
        }
        
       

        // make a marker for each feature and add it to the map
        new mapboxgl.Marker(el)
          .setLngLat(marker.geometry.coordinates)
        .setPopup(
            new mapboxgl.Popup({ offset: 25 }) // add popups
              .setHTML(
                '<div class="card"><div class="card-body p-11"><h5 class="card-title fs-5">'
                  +marker.properties.nama_jem +'</h5> <span class="btn '+bege+' text-white px-2 d-flex align-items-center"><i class="ti ti-message-circle fs-6 me-1"></i> Kondisi : ' +
                  marker.properties.kondisi +
                  '</span> </div> <ul class="list-group list-group-flush">'+
                  '<li class="list-group-item">Jumlah Bentang : '+marker.properties.jml_bentang+'</li>'+
                  '<li class="list-group-item">Panjang        : '+marker.properties.panjang+'</li>'+
                  '<li class="list-group-item">Lebar          : '+marker.properties.lebar+'</li>'+
                  '<li class="list-group-item">Kecamatan      : '+marker.properties.kec+'</li></ul></div>'
              )
          )
          .addTo(map);
      });
    
          
          //control
    map.addControl(new mapboxgl.NavigationControl());
    map.addControl(new mapboxgl.FullscreenControl({container: document.querySelector('#map')}));
    map.addControl(new mapboxgl.GeolocateControl({
positionOptions: {
enableHighAccuracy: true
},
trackUserLocation: true,
showUserHeading: true
}));
    
      map.on("load", function () {


          addBaseLayer();
        //addMaineLayer();
          
    //      console.log();
    //   addMarkersFromGeoJSON(geoJsonData);

     

          const layerList = document.getElementById("menu1");
          const inputs = layerList.getElementsByTagName("input");






function switchLayer(layer) {
    // addMaineLayer fn will be called once on layer switched
    map.once("styledata", addBaseLayer);
    map.once("styledata", addMaineLayer);

    const layerId = layer.target.id;
    if (layerId=='satelit'){
        
         const apiKey = "AAPK79d62b890b694fe6b15a3fa76116acf9ztzOzKN55-fQXqFyPp7KqRlhqm68rJW9Tj4BgViZoVt5GZrnGD7hbcXij58yGz-o";
      const basemapEnum = "ArcGIS:Imagery";
       map.setStyle(`https://basemaps-api.arcgis.com/arcgis/rest/services/styles/${basemapEnum}?type=style&token=${apiKey}`); 
    }
    else{
       map.setStyle("mapbox://styles/mapbox/" + layerId);  
    }
   
    

  }

  // set toggle base style events
  for (let i = 0; i < inputs.length; i++) {
    inputs[i].onclick = switchLayer;
  }

          
          // create legend
          const legend = document.getElementById('legend');
          const colors = [
          '#8CE205',
          '#068FFF',
          '#DDC80A',
          '#F4A800',
          '#F20063',
          '#770505'
          ];
          
             const layers = [
          'Baik',
          'RR (rusak ringan)',
          'RS (Rusak Sedang)',
          'RB (Rusak Berat)',
          'Kritis',
          'Runtuh'
          ];

          layers.forEach((layer, i) => {
          const color = colors[i];
          const item = document.createElement('div');
          const key = document.createElement('span');
          key.className = 'legend-key';
          key.style.backgroundColor = color;
          
          const value = document.createElement('span');
          value.innerHTML = `${layer}`;
          item.appendChild(key);
          item.appendChild(value);
          legend.appendChild(item);
          });


        
      
      });


map.on('styledata', function () {
    $('#menu a').filter('.active').each(function(i) {
  var ida= $(this).attr('id');
  const visibility = map.getLayoutProperty(ida,'visibility');
  //console.log(visibility);
  map.setLayoutProperty(ida, 'visibility', 'visible');  
});

})

function addBaseLayer() {
  
         map.addSource("jalannastile", {
          type: "vector",
          url: "mapbox://robait.9ioa8vf9"
        });              
                   
         map.addSource("bataskabtile", {
          type: "vector",
          url: "mapbox://robait.1wbh76pk"
        });
          map.addSource("jalankabtile", {
          type: "vector",
          url: "mapbox://robait.ad73so7a"
        }); 
        
            map.addSource("sungaitile", {
          type: "vector",
          url: "mapbox://robait.0jqpzklx"
        }); 


  const addLayer = (layer, beforeId) => map.addLayer(layer, beforeId);

   addLayerBefore(
    addLayer,
  {
          id: "bataskab",
          type: "line",
          source: "bataskabtile",
          "source-layer": "Kab_Madiun_Polyline-7gpmc2",
          layout: {},
          paint: {
            'line-color': '#fff',
            'line-width': 2
            },
        },
    "bataskab"
  );

   addLayerBefore(
    addLayer,
  {
          id: "jalannas",
          type: "line",
          source: "jalannastile",
          "source-layer": "JALAN_NASIONAL_MADIUN-2mmnhr",
          layout: {},
          paint: {
            'line-color': '#000',
            'line-width': 4
            },
        },
    "jalannas"
  );

  addLayerBefore(
    addLayer,
  {
          id: "jalankab",
          type: "line",
          source: "jalankabtile",
          "source-layer": "Jalan_kabupaten_100m-2lldiz",
          layout: {},
          paint: {
            'line-color': '#ccc',
            'line-width': 2
            },
        },
    "jalankab"
  );
  
//   addLayerBefore(
//     addLayer,
//   {
//           id: "sungaikab",
//           type: "line",
//           source: "sungaitile",
//           "source-layer": "Sungai_KabMadiun-6w7e9i",
//           layout: {},
//           paint: {
//             'line-color': '#82bdf7',
//             'line-width': 1
//             },
//         },
//     "sungaikab"
//   );


}  

function addMarkersFromGeoJSON(geoJsonData) {
  // Ganti dengan path ke file GeoJSON Anda
 const addLayer = (layer, beforeId) => map.addLayer(layer, beforeId);

  map.addSource("markers-source", {
    type: "geojson",
    data: geoJsonData
  });

  addLayerBefore(
    addLayer,
    {
      id: "markersx",
      type: "symbol",
      source: "markers-source",
      layout: {
        'icon-image': 'marker-15', // Gunakan ikon yang sesuai dengan kebutuhan Anda
        'icon-size': 1.5
      }
    },
    "markersx" // Tambahkan marker setelah base layer lainnya
  );
}

      




function addLayerBefore(addLayerFn, layer, beforeId) {
  // check beforeId defined and exists on the map
  const beforeLayer = Boolean(beforeId) && map.getLayer(beforeId);
  if (beforeLayer && beforeId === beforeLayer.id) addLayerFn(layer, beforeId);
  else {
    console.warn(
      `Not found layer with id '${beforeId}'.\nLayer '${
        layer.id
      }' added without before.`
    );
    addLayerFn(layer);
  }
}




      var popup = new mapboxgl.Popup({
        closeButton: false,
        closeOnClick: false,
      });

  {% for row in rows %}
  {% set idx= row.content['#view'].style_plugin.render_tokens[ loop.index0 ]['{{ nid }}'] %}
  {% set jenis= row.content['#view'].style_plugin.render_tokens[ loop.index0 ]['{{ field_jenis_import }}'] %}


   
      map.on("mousemove", "{{idx}}", function (e) {
        map.getCanvas().style.cursor = "pointer";

        var district = map.queryRenderedFeatures(e.point, {
          layers: ["{{idx}}"],
        });
        {# console.log(e.point); #}

        var props = district[0].properties;

        var state = district[0].state;

        var content = "<b>" + "Detail Jalan" + "</b>" + "<br>";
        {% if jenis =='Status Jalan Kabupaten'%}
        content += "<b>" + props.Nm_Ruas + "</b><br>";
          content += "No Ruas: " + props.Kd_Inf + "<br>";
        {% else %}
         content += "<b>" + props.Nm_Ruas + "</b><br>";
       {% endif %}      
        content += "Panjang Ruas: " + state.Panjang + "<br>";
        content += "STA_AWAL: " + props.STA_AWAL + "<br>";
        content += "STA_AKHIR: " + props.STA_AKHIR + "<br>";
        content += "Kondisi: " + state.Kondisi + "<br>";
        content += "Perkerasan: " + state.Tipe_Perke + "<br>";
        content += "Penanganan: " + state.Penanganan + "<br>";
        content += "Lebar: " + state.Lebar_STA + "<br>";
        popup.setLngLat(e.lngLat).setHTML(content).addTo(map);
      });

      map.on("mouseleave", "{{idx}}", function () {
        map.getCanvas().style.cursor = "";
        popup.remove();
      });

  {% endfor %}

      function transformRequest(url, resourceType) {
        var isMapboxRequest =
          url.slice(8, 22) === "api.mapbox.com" ||
          url.slice(10, 26) === "tiles.mapbox.com";
        return {
          url: isMapboxRequest
            ? url.replace("?", "?pluginName=dataJoins&")
            : url,
        };
      }
      function papaPromise(url) {
        return new Promise(function (resolve, reject) {
          Papa.parse(url, {
            download: true,
            header: true,
            skipEmptyLines: true,
            complete: resolve,
          });
        });
      }




$(function() {

  // info button transitions
  $(".menu").on("click", function() {
    $(".menu > i").toggleClass("fa-bars fa-close", 300);
    $(".sidebar-wrapper").toggleClass("show-sidebar", 500);
    $("body").toggleClass("push-body", 500);
  });
});



      
map.on('idle', () => {


  $("#filter").keyup(function(){
    var dInput = this.value;
    if(dInput.length>3){

        var options = {
	shouldSort: true,
	threshold: 0.2,
	maxPatternLength: 32,
	minMatchCharLength: 4,
	keys: ['properties.Nm_Ruas']
};


var arrfeat=[];
           $('#menu a').filter('.active').each(function(i) {
        var ida= $(this).attr('id');
        var tilex= $(this).attr('data-tile');
        var sourcex= $(this).attr('data-source');
        const cobax = map.queryRenderedFeatures({layers: [ida]});  

         arrfeat = arrfeat.concat(cobax);
          });

      
var fusex = new Fuse(arrfeat, options); 

        if (arrfeat) {
        var resultJSON = fusex.search(dInput);
    //    const uniqueFeatures = getUniqueFeatures(featuresx, 'No');
        renderListings(resultJSON); 
          }
    }  
  });


});

$('#menu a').click(function (e) {
   e.preventDefault();
   // $("#menu a").removeClass("active");
    $(this).toggleClass("active");
     var clickedLayer = $(this).attr("id");



              const visibility = map.getLayoutProperty(
                    clickedLayer,
                    'visibility'
                );

                // Toggle layer visibility by changing the layout object's visibility property.
                if (visibility === 'visible') {
                    map.setLayoutProperty(clickedLayer, 'visibility', 'none');
                   // this.className = '';
                } else {
                   // this.className = 'active';'
                    map.setLayoutProperty(
                        clickedLayer,
                        'visibility',
                        'visible'
                    );

          

                }




});


   function renderListings(features) {
     const listings = document.getElementById('wadahfeat');
      
  $('#wadahfeat').empty();  
  let itemNames =features; //features.filter(eachObj => eachObj.properties.Nm_Ruas.includes(dInput));

    
        if (itemNames.length) {
            for (const feature of itemNames) {
            
                 const listing = listings.appendChild(document.createElement('li'));
                 
                  /* Assign the 'item' class to each listing for styling. */
                  listing.className = 'itemx';

          /* Add the link to the individual listing created above. */
          const link = listing.appendChild(document.createElement('a'));
          link.href = '#';
          link.setAttribute('attname', 'attvalue');
          link.data = 'coba';
          link.id = feature.item.properties.No;
          link.innerHTML = feature.item.properties.Nm_Ruas+" "+feature.item.properties.STA_AWAL+" - "+feature.item.properties.STA_AKHIR; 

       link.addEventListener('click', function () {
            for (const featurex of itemNames) {
              //console.log(featurex);
              if (this.id === featurex.item.properties.No) {
                flyToStore(featurex.item);
                createPopUp(featurex.item);
              } 
            }
           
          });

            }

            // Show the filter input
           // filterEl.parentNode.style.display = 'block';
        } else if (features.length === 0 ) {
         
        } else {
          

       
        } 
    }



      function flyToStore(currentFeature) {
       // console.log(currentFeature);
       map.flyTo({
          center: currentFeature.geometry.coordinates[0],
          zoom: 15
        }); 
      }

      function createPopUp(currentFeature) {

        const popUps = document.getElementsByClassName('mapboxgl-popup');
        if (popUps[0]) popUps[0].remove();
        const popup = new mapboxgl.Popup({ closeOnClick: false })
          .setLngLat(currentFeature.geometry.coordinates[0])
          .setHTML(
            `<h3>${currentFeature.properties.Nm_Ruas}</h3><h4>${currentFeature.state.Kondisi}</h4>
            <p>Panjang: ${currentFeature.properties.Panjang}</p>
            <p>STA_AWAL: ${currentFeature.properties.STA_AWAL}</p>
            <p>STA_AKHIR: ${currentFeature.properties.STA_AKHIR}</p>
            <p>Tipe_Perkerasan: ${currentFeature.state.Tipe_Perke}</p>
            <p>Lebar_STA: ${currentFeature.state.Lebar_STA}</p>
            `
          )
          .addTo(map);
      }

      function getUniqueFeatures(features, comparatorProperty) {
      const uniqueIds = new Set();
      const uniqueFeatures = [];
      for (const feature of features) {
      const id = feature.properties.No+'_'+feature.properties.Nm_Ruas;
      if (!uniqueIds.has(id)) {
      uniqueIds.add(id);
      uniqueFeatures.push(feature);
      }
      }
      return uniqueFeatures;
      }



    </script>




