{#
/**
 * @file
 * Default theme implementation to display a view of unformatted rows.
 *
 * Available variables:
 * - title: The title of this group of rows. May be empty.
 * - rows: A list of the view's row items.
 *   - attributes: The row's HTML attributes.
 *   - content: The row's content.
 * - view: The view object.
 * - default_row_class: A flag indicating whether default classes should be
 *   used on rows.
 *
 * @see template_preprocess_views_view_unformatted()
 *
 * @ingroup themeable
 */
#}
<style>


/*Legend specific*/
.legend {
  padding: 6px 8px;
  font: 14px Arial, Helvetica, sans-serif;
  background: white;
  background: rgba(255, 255, 255, 0.8);
  /*box-shadow: 0 0 15px rgba(0, 0, 0, 0.2);*/
  /*border-radius: 5px;*/
  line-height: 24px;
  color: #555;
}
.legend h4 {
  text-align: center;
  font-size: 16px;
  margin: 2px 12px 8px;
  color: #777;
}

.legend span {
  position: relative;
  bottom: 3px;
}

.legend i {
  width: 18px;
  height: 18px;
  float: left;
  margin: 0 8px 0 0;
  opacity: 1;
}

.legend i.icon {
  background-size: 18px;
  background-color: rgba(255, 255, 255, 1);
}

</style>

  <script src="https://unpkg.com/leaflet@1.3.0/dist/leaflet.js">
     <script src="https://cdn.datatables.net/1.10.9/js/jquery.dataTables.min.js"></script>
     <script src="/modules/contrib/leaflet/js/leaflet-search.js?v=9.5.1"></script>
     <script src="/modules/contrib/leaflet/js/leaflet.legend.js"></script>
     <script src="/modules/contrib/leaflet/js/fuse.min.js?v=9.5.1"></script>
	 <link rel="stylesheet" href="https://unpkg.com/leaflet@1.0.3/dist/leaflet.css" />
	 <link rel="stylesheet" href="/modules/contrib/leaflet/js/leaflet-search.css" />
	 <link rel="stylesheet" href="https://cdn.datatables.net/1.10.9/css/jquery.dataTables.min.css" />


{% if title %}
  <h3>{{ title }}</h3>
{% endif %}

{% set filex= "/apidata" %}

<div uk-grid="" class="uk-child-width-1-1@s uk-child-width-1-2@m uk-child-width-1-4@xl uk-grid">
         
{% for row in rows %}

<div>

    {{ row.content }}
 </div>

{% endfor %}

</div>

<br>
<br>
  <div id="map" style="width:100%; height:600px;">  </div>



<script>

const pluto_url = '/apidatajson';
getData();

async function getData () {
   let mygeojson = {"type": "FeatureCollection", "features": []}
   await fetch(pluto_url)
  .then(response => response.json())
  .then(data => {
    for(let point of data){
      let scoor= point.field_lokasi;
      let coordinate = JSON.parse(scoor) ;
      let properties = point;
      delete properties.field_lokasi;       
      let feature = {"type": "Feature", "geometry": coordinate, "properties": properties}
      mygeojson.features.push(feature);
    }
  });
  //console.log(mygeojson);
	var featureNames = [];
  
            var map = L.map('map')
                .setView([-7.500,111.653], 14);
                

            var basemap =   L.tileLayer('http://{s}.google.com/vt/lyrs=s&x={x}&y={y}&z={z}',{
    maxZoom: 20,
    scrollWheelZoom: false,
    subdomains:['mt0','mt1','mt2','mt3']
}).addTo(map);
			
		var myIcon = L.icon({
  iconUrl: '/sites/default/files/jembatan.png',
  iconSize: [32, 37],
  iconAnchor: [16, 37],
  popupAnchor: [0, -28]
});

            // Add requested external GeoJSON to map
    var g002 = L.geoJSON(mygeojson,{
        
			style: function(feature) {

				switch (feature.properties.Kondisi) {
					case 'Rusak Ringan': return {color: "orange",weight: 4};
					case 'Sedang':   return {color: "yellow",weight: 4};
					case 'Baik':   return {color: "#00d501",weight: 4};
					case 'Rusak Berat':   return {color: "red",weight: 4};
				}

 

        
  			
				
			},
			
			
		onEachFeature: function(feature, featureLayer) 
		   {    

      			featureLayer.bindPopup("<h4>Nama Ruas: <br>" + feature.properties.Nm_Ruas +"<br> Kondisi: "+feature.properties.Kondisi+"</h4>"
				+ "<br>" + "STA_Awal: " + feature.properties.STA_Awal
				+ "<br>" + "STA_Akhir: " + feature.properties.STA_Akhir
				+ "<br>" + "Kondisi: " + feature.properties.Kondisi
				+ "<br>" + "Kode_Infra: " + feature.properties.Kode_Infra
				+ "<br>" + "PnjangRuas: " + feature.properties.PnjangRuas
				+ "<br>" + "<a class='uk-label uk-label-success' href='/node/"+feature.properties.id+"/edit?destination=/peta-kondisi-jalan'>  edit </a> " 
        
        )
				
				 featureNames.push({ STA_Awal: feature.properties.STA_Awal, STA_Akhir : feature.properties.STA_Akhir, Kondisi:feature.properties.Kondisi});

            var p = featureLayer.feature.properties;

				p.index = p.Kode_Infra + " | " + p.Nm_Ruas;
 
		   }
		   
 
       
       });
		   

       map.addLayer(g002);
	    	g002.bringToBack();

      
			
			
			//legend
		
		
			/*Legend specific*/

      {% set legendx= '<i style="background: #00d501"></i><span>Kondisi B</span><br> <i style="background: yellow"></i><span>Kondisi S</span><br> <i style="background: orange"></i><span>Kondisi RR</span><br> <i style="background: red"></i><span>Kondisi RB</span><br>' %}



			var legend = L.control({ position: "bottomleft" });

			legend.onAdd = function(map) {
        
			  var div = L.DomUtil.create("div", "legend");
			  div.innerHTML += "<h4>Legenda</h4>";
			  div.innerHTML +='{{legendx | raw}}';
			return div;
			};

			legend.addTo(map);


		var fuse = new Fuse(mygeojson.features, {
		keys: ['properties.index',
			//'properties.operator'
		]
	});


 		var searchControl = new L.Control.Search({
		layer: g002,	
		propertyName: 'index',
		position: 'topleft',
		filterData: function(text, records) {
			var jsons = fuse.search(text),
				ret = {}, key;
			
			for(var i in jsons) {
				key = jsons[i].properties.index;
				ret[ key ]= records[key];
			}

			
			return ret;
		},
	})
  .on('search:locationfound', function(e) {
		e.layer.openPopup();
	})
	.addTo(map);


	//console.log(featureNames);
{# 
		jQuery('#myTable').DataTable({
		  data: featureNames,
		  columns : [
                  {"data" : "STA_Awal"},
                  {"data" : "STA_Akhir"},
                  {"data" : "Kondisi"}
                 ],
		  scrollY: 300,
		  paging: false
		}); #}




}


</script>