{#
/**
 * @file
 * Theme override to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - node.getCreatedTime() will return the node creation timestamp.
 *   - node.hasField('field_example') returns TRUE if the node bundle includes
 *     field_example. (This does not indicate the presence of a value in this
 *     field.)
 *   - node.isPublished() will return whether the node is published or not.
 *   Calling other methods, such as node.delete(), will result in an exception.
 *   See \Drupal\node\Entity\Node for a full list of public properties and
 *   methods for the node object.
 * - label: The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: Themed creation date field.
 * - author_name: Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_node()
 *
 * @ingroup uikit_themeable
 */
#}
<article{{ attributes.addClass('uk-article') }}>


    <script src="https://api.mapbox.com/mapbox-gl-js/v2.0.1/mapbox-gl.js"></script>
    <link
      href="https://api.mapbox.com/mapbox-gl-js/v2.0.1/mapbox-gl.css"
      rel="stylesheet"
    />
    <script src="https://unpkg.com/papaparse@latest/papaparse.min.js"></script>
    <style>
      body {
        margin: 0;
        padding: 0;
      }

      #map {
        top: 0;
        bottom: 0;
        height:700px;
        width: 100%;
      }

      .mapboxgl-popup {
        max-width: 400px;
        font: 12px/20px "Helvetica Neue", Arial, Helvetica, sans-serif;
      }

      .mapboxgl-popup {
        max-width: 400px;
        font: 12px/20px "Helvetica Neue", Arial, Helvetica, sans-serif;
      }
      .map-overlay {
position: absolute;
    bottom: 40px;
    right: 2px;
    background: #fff;
    margin-right: 20px;
    font-family: Arial, sans-serif;
    overflow: auto;
    border-radius: 3px;
    padding: 13px;
}
#legend {
    padding: 10px;
    box-shadow: 0 1px 2px rgb(0 0 0 / 10%);
    line-height: 22px;
    height: 137px;
    width: 144px;
    font-size: 14px;
}
.legend-key {
display: inline-block;
border-radius: 20%;
width: 10px;
height: 10px;
margin-right: 5px;
}

  #menu {
      position: absolute;
    background: #fff;
    border-radius: 20px;
    top: 9px;
    left: 12px;
    padding: 10px;
    font-family: "Open Sans", sans-serif; 
      }
    </style>



  {{ title_prefix }}
  {% if not page %}
    <h2{{ title_attributes.addClass('uk-article-title') }}>
      <a href="{{ url }}" rel="bookmark">{{ label }}</a>
    </h2>
  {% endif %}
  {{ title_suffix }}
  {{fileimport}}
  <br>


  <div id="map"></div>
  <div class="map-overlay" id="legend"></div>
 <div id="menu">
      <input
        id="streets-v11"
        type="radio"
        name="rtoggle"
        value="streets"
        checked="checked"
      />
      <label for="streets">streets</label>
      <input id="light-v10" type="radio" name="rtoggle" value="light" />
      <label for="light">light</label>
      <input id="dark-v10" type="radio" name="rtoggle" value="dark" />
      <label for="dark">dark</label>
      <input id="outdoors-v11" type="radio" name="rtoggle" value="outdoors" />
      <label for="outdoors">outdoors</label>
      <input id="satellite-v9" type="radio" name="rtoggle" value="satellite" />
      <label for="satellite">satellite</label>
    </div>

  <script>
      const csvUrl = 'https://silatjantan.dpupr.madiunkab.go.id{{fileimport}}';

      const csvPromise = papaPromise(csvUrl);
      //YOUR TURN: Replace with your Mapbox Token
      mapboxgl.accessToken = 'pk.eyJ1Ijoicm9iYWl0IiwiYSI6ImNqbXEzczh2bjA2bjgzd213azh2ZXE0bTYifQ.H4ObVqAY4KTQk17fpTV1kw';
      var map = new mapboxgl.Map({
        container: "map",
        style: 'mapbox://styles/mapbox/satellite-v9', // style URL
        zoom: 12, // starting zoom
        center: [111.653,-7.500]
      });

      map.on("load", function () {

  



   //     map.addLayer();

        
          //  map.addLayer();

        
        //    map.addLayer();

          addMaineLayer();

          const layerList = document.getElementById("menu");
          const inputs = layerList.getElementsByTagName("input");

          function switchLayer(layer) {
    // addMaineLayer fn will be called once on layer switched
    map.once("styledata", addMaineLayer);
    const layerId = layer.target.id;
    map.setStyle("mapbox://styles/mapbox/" + layerId);
  }

  // set toggle base style events
  for (let i = 0; i < inputs.length; i++) {
    inputs[i].onclick = switchLayer;
  }

          
          // create legend
          const legend = document.getElementById('legend');
          const colors = [
          '#25ed25',
          'yellow',
          'red',
          '#630606',
          '#000',
          '#ccc'
          ];
          
             const layers = [
          'baik',
          'sedang',
          'RR (Rusak Ringan)',
          'RB (Rusak Berat)',
          'Jalan nasional',
          'Batas Wilayah'
          ];

          layers.forEach((layer, i) => {
          const color = colors[i];
          const item = document.createElement('div');
          const key = document.createElement('span');
          key.className = 'legend-key';
          key.style.backgroundColor = color;
          
          const value = document.createElement('span');
          value.innerHTML = `${layer}`;
          item.appendChild(key);
          item.appendChild(value);
          legend.appendChild(item);
          });


        
      
      });


      
function addMaineLayer() {

          csvPromise.then(function (results) {
         // console.log(results.data);
          results.data.forEach((row) => {
            if(row.Kondisi_Kini!='')
            {
              console.log(row.Kondisi_Kini);
              var kondisix=row.Kondisi_Kini;
              var perke=row.Perke_Kini;
            }
            else{
               var kondisix=row.Kondisi;
               var perke=row.Tipe_Perke;
            }
            map.setFeatureState(
              {
                //YOUR TURN: Replace with your source tileset and source layer
                source: "jalantile",
                sourceLayer: "{{tilex}}",
                //YOUR TURN: Replace with unqiue ID row name
                id: {{idx}},
              },
              //YOUR TURN: Add rows you want to style/interact with
              {                                 
                Kondisi: kondisix,
                Tipe_Perke: perke,
                Lebar_STA: row.Lebar_STA,
              }
            );
          });
        });



      //YOUR TURN: Add source layer
        map.addSource("jalantile", {
          type: "vector",
          url: "mapbox://{{mapboxid}}",
          promoteId: "{{promoteid}}",
        });

         map.addSource("jalannastile", {
          type: "vector",
          url: "mapbox://robait.9ioa8vf9"
        });
         map.addSource("bataskabtile", {
          type: "vector",
          url: "mapbox://robait.1wbh76pk"
        });


  const addLayer = (layer, beforeId) => map.addLayer(layer, beforeId);

  
     
  addLayerBefore(
    addLayer,
   {
          id: "jalankab",
          type: "line",
          source: "jalantile",
          "source-layer": "{{tilex}}",
          layout: {},
          paint: {
            'line-color': [
            'match',
            ['feature-state', 'Kondisi'],
            'baik','#25ed25',
            'baik ','#25ed25',
            'sedang','yellow',
            'RR','red',
            'RB','#630606',
            /* other */ '#ccc'
            ],
            'line-width': 4
            },
        },
    "waterway-label1"
  );

   addLayerBefore(
    addLayer,
  {
          id: "bataskab",
          type: "line",
          source: "bataskabtile",
          "source-layer": "Kab_Madiun_Polyline-7gpmc2",
          layout: {},
          paint: {
            'line-color': '#ccc',
            'line-width': 2
            },
        },
    "waterway-label2"
  );

   addLayerBefore(
    addLayer,
  {
          id: "jalannas",
          type: "line",
          source: "jalannastile",
          "source-layer": "JALAN_NASIONAL_MADIUN-2mmnhr",
          layout: {},
          paint: {
            'line-color': '#000',
            'line-width': 4
            },
        },
    "waterway-label3"
  );


}

function addLayerBefore(addLayerFn, layer, beforeId) {
  // check beforeId defined and exists on the map
  const beforeLayer = Boolean(beforeId) && map.getLayer(beforeId);
  if (beforeLayer && beforeId === beforeLayer.id) addLayerFn(layer, beforeId);
  else {
    console.warn(
      `Not found layer with id '${beforeId}'.\nLayer '${
        layer.id
      }' added without before.`
    );
    addLayerFn(layer);
  }
}





      var popup = new mapboxgl.Popup({
        closeButton: false,
        closeOnClick: false,
      });

      map.on("mousemove", "jalankab", function (e) {
        map.getCanvas().style.cursor = "pointer";

        var district = map.queryRenderedFeatures(e.point, {
          layers: ["jalankab"],
        });

        var props = district[0].properties;

        var state = district[0].state;

        var content = "<b>" + "Detail Jalan" + "</b>" + "<br>";
        {% if jenis =='kab'%}
        content += "<b>" + props.Nm_Ruas + "</b><br>";
          content += "No Ruas: " + props.Kd_Inf + "<br>";
        {% else %}
         content += "<b>" + props.Name + "</b><br>";
       {% endif %}      
        content += "Panjang Ruas: " + props.Panjang + "<br>";
        content += "STA_AWAL: " + props.STA_AWAL + "<br>";
        content += "STA_AKHIR: " + props.STA_AKHIR + "<br>";
        content += "Kondisi: " + state.Kondisi + "<br>";
        content += "Perkerasan: " + state.Tipe_Perke + "<br>";
        content += "Lebar: " + state.Lebar_STA + "<br>";
        popup.setLngLat(e.lngLat).setHTML(content).addTo(map);
      });

      map.on("mouseleave", "jalankab", function () {
        map.getCanvas().style.cursor = "";
        popup.remove();
      });

      function transformRequest(url, resourceType) {
        var isMapboxRequest =
          url.slice(8, 22) === "api.mapbox.com" ||
          url.slice(10, 26) === "tiles.mapbox.com";
        return {
          url: isMapboxRequest
            ? url.replace("?", "?pluginName=dataJoins&")
            : url,
        };
      }
      function papaPromise(url) {
        return new Promise(function (resolve, reject) {
          Papa.parse(url, {
            download: true,
            header: true,
            skipEmptyLines: true,
            complete: resolve,
          });
        });
      }


      
const layerList = document.getElementById('menu');
const inputs = layerList.getElementsByTagName('input');
 
for (const input of inputs) {
input.onclick = (layer) => {
const layerId = layer.target.id;
map.setStyle('mapbox://styles/mapbox/' + layerId);
};
}



    </script>




  {% if display_submitted %}
    <footer>
      {{ author_picture }}
      <div{{ author_attributes.addClass('uk-article-meta') }}>
        {% trans %}Submitted by {{ author_name }} on {{ date }}{% endtrans %}
        {{ metadata }}
      </div>
    </footer>
  {% endif %}

 

</article>
